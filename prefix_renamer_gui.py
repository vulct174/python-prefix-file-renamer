import json
import os
import threading
import tkinter as tk
import webbrowser
from datetime import datetime
from tkinter import filedialog, ttk
from tkinter import messagebox
from tkinter import PhotoImage
from PIL import Image, ImageTk

class PrefixRenamerApp:
    def __init__(self, root):
        self.logo_image = None
        self.root = root
        self.root.title("Prefix File Renamer")
        self.root.geometry("900x650")
        self.root.resizable(True, True)

        # M√†u s·∫Øc v√† phong c√°ch
        self.bg_color = "#f5f5f5"
        self.accent_color = "#3498db"
        self.button_color = "#2980b9"
        self.success_color = "#2ecc71"
        self.warning_color = "#f39c12"
        self.error_color = "#e74c3c"

        # Thi·∫øt l·∫≠p style cho ttk
        self.style = ttk.Style()
        self.style.theme_use('clam')
        self.style.configure('TFrame', background=self.bg_color)
        self.style.configure('TLabelframe', background=self.bg_color)
        self.style.configure('TLabelframe.Label', background=self.bg_color, font=('Arial', 10, 'bold'))
        self.style.configure('TButton', background=self.button_color, foreground='white', font=('Arial', 10))
        self.style.configure('Success.TButton', background=self.success_color)
        self.style.map('TButton', background=[('active', '#3498db')])
        self.style.configure('TLabel', background=self.bg_color, font=('Arial', 10))
        self.style.configure('Header.TLabel', font=('Arial', 12, 'bold'))

        # Bi·∫øn ƒë·ªÉ l∆∞u tr·ªØ ƒë∆∞·ªùng d·∫´n v√† prefix
        self.folder_path = tk.StringVar()
        self.prefix = tk.StringVar()
        self.status = tk.StringVar()
        self.status.set("S·∫µn s√†ng")
        self.total_files = 0
        self.processed_files = 0

        # T·∫£i c√°c prefix ƒë√£ l∆∞u
        self.recent_prefixes = self.load_recent_prefixes()

        # Bi·∫øn cho ch·∫ø ƒë·ªô xem tr∆∞·ªõc
        self.preview_mode = tk.BooleanVar(value=True)

        # Icons (s·ª≠ d·ª•ng m√£ Unicode cho c√°c bi·ªÉu t∆∞·ª£ng c∆° b·∫£n)
        self.icons = {
            'folder': "üìÅ",
            'file': "üìÑ",
            'edit': "‚úèÔ∏è",
            'start': "‚ñ∂Ô∏è",
            'settings': "‚öôÔ∏è",
            'preview': "üëÅÔ∏è",
            'save': "üíæ",
            'history': "üïí",
            'help': "‚ùì",
            'github': "üîó",
            'success': "‚úÖ",
            'error': "‚ùå",
            'warning': "‚ö†Ô∏è",
            'info': "‚ÑπÔ∏è"
        }

        # Thi·∫øt l·∫≠p giao di·ªán
        self.setup_ui()

    def setup_ui(self):
        self.root.configure(bg=self.bg_color)

        # Frame ch√≠nh
        main_frame = ttk.Frame(self.root, padding=10)
        main_frame.pack(fill="both", expand=True)

        # Header v·ªõi logo v√† ti√™u ƒë·ªÅ
        header_frame = ttk.Frame(main_frame)
        header_frame.pack(fill="x", pady=(0, 10))

        # Load v√† resize logo
        original_logo = Image.open("assets/logo.png")
        resized_logo = original_logo.resize((40, 40), Image.Resampling.LANCZOS)  # d√πng LANCZOS ƒë·ªÉ thay cho ANTIALIAS
        self.logo_image = ImageTk.PhotoImage(resized_logo)

        # Hi·ªÉn th·ªã
        logo_label = tk.Label(header_frame, image=self.logo_image, background=self.bg_color)
        logo_label.pack(side="left", padx=(0, 10))

        # Ti√™u ƒë·ªÅ
        title_label = ttk.Label(header_frame, text="Prefix File Renamer", style="Header.TLabel",
                                font=('Arial', 16, 'bold'))
        title_label.pack(side="left")

        github_button = ttk.Button(header_frame, text=f"{self.icons['github']} GitHub", command=self.open_github)
        github_button.pack(side="right", padx=5)

        help_button = ttk.Button(header_frame, text=f"{self.icons['help']} Tr·ª£ gi√∫p", command=self.show_help)
        help_button.pack(side="right", padx=5)

        # Input frame
        input_frame = ttk.LabelFrame(main_frame, text="Th√¥ng tin ƒë·∫ßu v√†o")
        input_frame.pack(fill="x", pady=10)

        # Ch·ªçn th∆∞ m·ª•c
        folder_frame = ttk.Frame(input_frame)
        folder_frame.pack(fill="x", padx=10, pady=5)

        folder_label = ttk.Label(folder_frame, text=f"{self.icons['folder']} Th∆∞ m·ª•c:")
        folder_label.pack(side="left", padx=(0, 5))

        folder_entry = ttk.Entry(folder_frame, textvariable=self.folder_path, width=60)
        folder_entry.pack(side="left", fill="x", expand=True, padx=5)

        browse_button = ttk.Button(folder_frame, text="Duy·ªát...", command=self.browse_folder)
        browse_button.pack(side="left", padx=5)

        # Nh·∫≠p prefix
        prefix_frame = ttk.Frame(input_frame)
        prefix_frame.pack(fill="x", padx=10, pady=5)

        prefix_label = ttk.Label(prefix_frame, text=f"{self.icons['edit']} Prefix:")
        prefix_label.pack(side="left", padx=(0, 5))

        self.prefix_combobox = ttk.Combobox(prefix_frame, textvariable=self.prefix, width=40)
        self.prefix_combobox['values'] = self.recent_prefixes
        self.prefix_combobox.pack(side="left", fill="x", expand=True, padx=5)

        save_prefix_button = ttk.Button(prefix_frame, text=f"{self.icons['save']} L∆∞u prefix", command=self.save_prefix)
        save_prefix_button.pack(side="left", padx=5)

        # Frame ch·ª©a c√°c tu·ª≥ ch·ªçn
        options_frame = ttk.Frame(input_frame)
        options_frame.pack(fill="x", padx=10, pady=5)

        preview_check = ttk.Checkbutton(options_frame, text=f"{self.icons['preview']} Xem tr∆∞·ªõc",
                                        variable=self.preview_mode)
        preview_check.pack(side="left", padx=5)

        # N√∫t th·ª±c hi·ªán
        action_frame = ttk.Frame(input_frame)
        action_frame.pack(fill="x", padx=10, pady=10)

        self.rename_button = ttk.Button(action_frame, text=f"{self.icons['start']} B·∫Øt ƒë·∫ßu ƒë·ªïi t√™n",
                                        command=self.start_process, style='Success.TButton')
        self.rename_button.pack(side="right", padx=5)

        # Progress bar v√† status
        progress_frame = ttk.LabelFrame(main_frame, text="Ti·∫øn tr√¨nh")
        progress_frame.pack(fill="x", pady=10)

        self.progress_bar = ttk.Progressbar(progress_frame, orient="horizontal", length=100, mode="determinate")
        self.progress_bar.pack(fill="x", padx=10, pady=5)

        status_frame = ttk.Frame(progress_frame)
        status_frame.pack(fill="x", padx=10, pady=2)

        status_icon = ttk.Label(status_frame, text=f"{self.icons['info']}")
        status_icon.pack(side="left")

        status_label = ttk.Label(status_frame, textvariable=self.status)
        status_label.pack(side="left", padx=5)

        # Khu v·ª±c hi·ªÉn th·ªã k·∫øt qu·∫£ d·∫°ng b·∫£ng
        results_frame = ttk.LabelFrame(main_frame, text="K·∫øt qu·∫£")
        results_frame.pack(fill="both", expand=True, pady=10)

        # T·∫°o Treeview ƒë·ªÉ hi·ªÉn th·ªã d·ªØ li·ªáu d·∫°ng b·∫£ng
        columns = ('status', 'original_name', 'new_name')
        self.result_table = ttk.Treeview(results_frame, columns=columns, show='headings')

        # ƒê·ªãnh nghƒ©a c√°c c·ªôt
        self.result_table.heading('status', text='Tr·∫°ng th√°i')
        self.result_table.heading('original_name', text='T√™n g·ªëc')
        self.result_table.heading('new_name', text='T√™n m·ªõi')

        self.result_table.column('status', width=100, anchor='center')
        self.result_table.column('original_name', width=300)
        self.result_table.column('new_name', width=300)

        # T·∫°o scrollbar
        table_scroll_y = ttk.Scrollbar(results_frame, orient="vertical", command=self.result_table.yview)
        table_scroll_x = ttk.Scrollbar(results_frame, orient="horizontal", command=self.result_table.xview)
        self.result_table.configure(yscrollcommand=table_scroll_y.set, xscrollcommand=table_scroll_x.set)

        # ƒê·∫∑t v·ªã tr√≠ c√°c th√†nh ph·∫ßn
        table_scroll_y.pack(side="right", fill="y")
        table_scroll_x.pack(side="bottom", fill="x")
        self.result_table.pack(fill="both", expand=True)

        # Footer v·ªõi th√¥ng tin b·∫£n quy·ªÅn
        footer_frame = ttk.Frame(main_frame)
        footer_frame.pack(fill="x", pady=5)

        footer_label = ttk.Label(footer_frame, text="¬© 2025 vulct174 | Prefix File Renamer", foreground="#777")
        footer_label.pack(side="left")

        # Tag cho hi·ªÉn th·ªã m√†u trong b·∫£ng
        self.result_table.tag_configure('success', background='#e8f8f5')
        self.result_table.tag_configure('warning', background='#fef9e7')
        self.result_table.tag_configure('error', background='#fadbd8')

    def browse_folder(self):
        folder_selected = filedialog.askdirectory()
        if folder_selected:
            self.folder_path.set(folder_selected)
            # N·∫øu ·ªü ch·∫ø ƒë·ªô xem tr∆∞·ªõc, t·ª± ƒë·ªông hi·ªÉn th·ªã xem tr∆∞·ªõc khi ch·ªçn th∆∞ m·ª•c m·ªõi
            if self.preview_mode.get() and self.prefix.get().strip():
                self.preview_renaming()

    def load_recent_prefixes(self):
        try:
            config_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), "prefix_history.json")
            if os.path.exists(config_path):
                with open(config_path, "r") as f:
                    data = json.load(f)
                    return data.get("prefixes", [])
        except Exception:
            pass
        return []

    def save_prefix(self):
        prefix = self.prefix.get().strip()
        if not prefix:
            return

        # Th√™m prefix m·ªõi v√†o ƒë·∫ßu danh s√°ch v√† gi·ªØ l·∫°i t·ªëi ƒëa 10 prefix
        if prefix in self.recent_prefixes:
            self.recent_prefixes.remove(prefix)
        self.recent_prefixes.insert(0, prefix)
        self.recent_prefixes = self.recent_prefixes[:10]  # Gi·ªØ l·∫°i 10 prefix g·∫ßn nh·∫•t

        # C·∫≠p nh·∫≠t combobox
        self.prefix_combobox['values'] = self.recent_prefixes

        # L∆∞u v√†o file
        try:
            config_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), "prefix_history.json")
            with open(config_path, "w") as f:
                json.dump({"prefixes": self.recent_prefixes}, f)

            self.status.set(f"ƒê√£ l∆∞u prefix '{prefix}' v√†o danh s√°ch")
        except Exception as e:
            self.status.set(f"L·ªói khi l∆∞u prefix: {str(e)}")

    def clear_results(self):
        # X√≥a t·∫•t c·∫£ c√°c m·ª•c trong b·∫£ng k·∫øt qu·∫£
        for item in self.result_table.get_children():
            self.result_table.delete(item)

    def add_result_row(self, status_icon, status_tag, original_name, new_name):
        # Th√™m m·ªôt d√≤ng v√†o b·∫£ng k·∫øt qu·∫£
        self.result_table.insert('', 'end', values=(status_icon, original_name, new_name), tags=(status_tag,))

    def open_github(self):
        webbrowser.open("https://github.com/vulct174/python-prefix-file-renamer")

    def show_help(self):
        help_text = """
        H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng Prefix File Renamer:

        1. Ch·ªçn th∆∞ m·ª•c ch·ª©a c√°c file c·∫ßn ƒë·ªïi t√™n b·∫±ng c√°ch nh·∫•n n√∫t "Duy·ªát..."
        2. Nh·∫≠p prefix (ti·ªÅn t·ªë) m√† b·∫°n mu·ªën th√™m v√†o ƒë·∫ßu t√™n file
        3. B·∫°n c√≥ th·ªÉ ch·ªçn m·ªôt prefix ƒë√£ s·ª≠ d·ª•ng tr∆∞·ªõc ƒë√≥ t·ª´ dropdown
        4. ƒê·ªÉ l∆∞u prefix m·ªõi v√†o danh s√°ch, nh·∫•n n√∫t "L∆∞u prefix"
        5. T√≠ch v√†o "Xem tr∆∞·ªõc" ƒë·ªÉ xem k·∫øt qu·∫£ tr∆∞·ªõc khi th·ª±c hi·ªán
        6. Nh·∫•n "B·∫Øt ƒë·∫ßu ƒë·ªïi t√™n" ƒë·ªÉ th·ª±c hi·ªán vi·ªác ƒë·ªïi t√™n file

        C√°c t√≠nh nƒÉng:
        - C√°c file ƒë√£ c√≥ prefix s·∫Ω t·ª± ƒë·ªông ƒë∆∞·ª£c b·ªè qua
        - B·∫£ng k·∫øt qu·∫£ hi·ªÉn th·ªã t√™n file tr∆∞·ªõc v√† sau khi ƒë·ªïi
        - M√†u xanh: File ƒë√£ ƒë∆∞·ª£c ƒë·ªïi t√™n th√†nh c√¥ng
        - M√†u v√†ng: File ƒë∆∞·ª£c b·ªè qua (ƒë√£ c√≥ prefix)
        - M√†u ƒë·ªè: L·ªói khi ƒë·ªïi t√™n file

        ¬© 2025 vulct174 | Prefix File Renamer
        """
        messagebox.showinfo("Tr·ª£ gi√∫p", help_text)

    def preview_renaming(self):
        """Xem tr∆∞·ªõc k·∫øt qu·∫£ ƒë·ªïi t√™n m√† kh√¥ng th·ª±c s·ª± ƒë·ªïi t√™n file"""
        folder_path = self.folder_path.get().strip()
        prefix = self.prefix.get().strip()

        if not folder_path or not os.path.isdir(folder_path):
            self.status.set("L·ªói: ƒê∆∞·ªùng d·∫´n th∆∞ m·ª•c kh√¥ng h·ª£p l·ªá!")
            return

        if not prefix:
            self.status.set("L·ªói: Prefix kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!")
            return

        # X√≥a k·∫øt qu·∫£ c≈©
        self.clear_results()

        # ƒê·∫∑t ti√™u ƒë·ªÅ cho ch·∫ø ƒë·ªô xem tr∆∞·ªõc
        self.status.set("ƒêang xem tr∆∞·ªõc k·∫øt qu·∫£...")

        try:
            # L·∫•y danh s√°ch t·∫•t c·∫£ c√°c file trong th∆∞ m·ª•c
            files = [f for f in os.listdir(folder_path) if os.path.isfile(os.path.join(folder_path, f))]

            if len(files) == 0:
                self.status.set("Kh√¥ng t√¨m th·∫•y file n√†o trong th∆∞ m·ª•c n√†y.")
                return

            # X·ª≠ l√Ω t·ª´ng file trong ch·∫ø ƒë·ªô xem tr∆∞·ªõc
            for filename in files:
                if not filename.startswith(prefix):
                    new_filename = prefix + filename
                    self.add_result_row(f"{self.icons['success']}", 'success', filename, new_filename)
                else:
                    self.add_result_row(f"{self.icons['warning']}", 'warning', filename, "(kh√¥ng thay ƒë·ªïi)")

            self.status.set(f"Xem tr∆∞·ªõc ho√†n t·∫•t. T√¨m th·∫•y {len(files)} file.")

        except Exception as e:
            self.status.set(f"L·ªói khi xem tr∆∞·ªõc: {str(e)}")

    def start_process(self):
        """B·∫Øt ƒë·∫ßu qu√° tr√¨nh ƒë·ªïi t√™n ho·∫∑c xem tr∆∞·ªõc"""
        if self.preview_mode.get():
            self.preview_renaming()
            # H·ªèi ng∆∞·ªùi d√πng c√≥ mu·ªën ti·∫øp t·ª•c kh√¥ng
            if messagebox.askyesno("X√°c nh·∫≠n", "B·∫°n c√≥ mu·ªën ti·∫øp t·ª•c ƒë·ªïi t√™n c√°c file kh√¥ng?"):
                self.preview_mode.set(False)  # T·∫Øt ch·∫ø ƒë·ªô xem tr∆∞·ªõc
                self.start_renaming()  # Th·ª±c hi·ªán ƒë·ªïi t√™n
        else:
            self.start_renaming()

    def start_renaming(self):
        """B·∫Øt ƒë·∫ßu qu√° tr√¨nh ƒë·ªïi t√™n th·∫≠t s·ª±"""
        # Ki·ªÉm tra d·ªØ li·ªáu nh·∫≠p v√†o
        folder_path = self.folder_path.get().strip()
        prefix = self.prefix.get().strip()

        if not folder_path or not os.path.isdir(folder_path):
            self.status.set("L·ªói: ƒê∆∞·ªùng d·∫´n th∆∞ m·ª•c kh√¥ng h·ª£p l·ªá!")
            return

        if not prefix:
            self.status.set("L·ªói: Prefix kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!")
            return

        # V√¥ hi·ªáu h√≥a n√∫t ƒë·ªÉ tr√°nh nh·∫•n nhi·ªÅu l·∫ßn
        self.rename_button["state"] = "disabled"

        # X√≥a k·∫øt qu·∫£ c≈©
        self.clear_results()

        # B·∫Øt ƒë·∫ßu ti·∫øn tr√¨nh ƒë·ªïi t√™n trong m·ªôt thread ri√™ng
        threading.Thread(target=self.rename_files_with_prefix, args=(folder_path, prefix)).start()

    def rename_files_with_prefix(self, folder_path, prefix):
        try:
            # L∆∞u prefix v√†o danh s√°ch g·∫ßn ƒë√¢y
            if prefix not in self.recent_prefixes:
                self.recent_prefixes.insert(0, prefix)
                self.recent_prefixes = self.recent_prefixes[:10]
                self.prefix_combobox['values'] = self.recent_prefixes
                self.save_prefix()

            # L·∫•y danh s√°ch t·∫•t c·∫£ c√°c file trong th∆∞ m·ª•c
            files = [f for f in os.listdir(folder_path) if os.path.isfile(os.path.join(folder_path, f))]
            self.total_files = len(files)
            self.processed_files = 0

            if self.total_files == 0:
                self.status.set("Kh√¥ng t√¨m th·∫•y file n√†o trong th∆∞ m·ª•c n√†y.")
                self.rename_button["state"] = "normal"
                return

            self.progress_bar["maximum"] = self.total_files
            self.progress_bar["value"] = 0

            self.status.set(f"ƒêang x·ª≠ l√Ω {self.total_files} file...")

            renamed_count = 0
            skipped_count = 0
            error_count = 0

            # T·∫°o file log
            log_folder = os.path.join(folder_path, "prefix_renamer_logs")
            os.makedirs(log_folder, exist_ok=True)
            log_file = os.path.join(log_folder, f"rename_log_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt")

            with open(log_file, "w", encoding="utf-8") as log:
                log.write(f"Prefix File Renamer - Log {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
                log.write(f"Th∆∞ m·ª•c: {folder_path}\n")
                log.write(f"Prefix: {prefix}\n")
                log.write("-" * 50 + "\n\n")

                # X·ª≠ l√Ω t·ª´ng file
                for filename in files:
                    file_path = os.path.join(folder_path, filename)

                    # Ki·ªÉm tra xem prefix ƒë√£ t·ªìn t·∫°i trong t√™n file ch∆∞a
                    if not filename.startswith(prefix):
                        # T·∫°o t√™n file m·ªõi
                        new_filename = prefix + filename
                        new_file_path = os.path.join(folder_path, new_filename)

                        # ƒê·ªïi t√™n file
                        try:
                            os.rename(file_path, new_file_path)
                            self.add_result_row(f"{self.icons['success']}", 'success', filename, new_filename)
                            log.write(f"ƒê·ªïi t√™n: {filename} -> {new_filename}\n")
                            renamed_count += 1
                        except Exception as e:
                            self.add_result_row(f"{self.icons['error']}", 'error', filename, f"L·ªói: {str(e)}")
                            log.write(f"L·ªói khi ƒë·ªïi t√™n '{filename}': {str(e)}\n")
                            error_count += 1
                    else:
                        self.add_result_row(f"{self.icons['warning']}", 'warning', filename,
                                            "(kh√¥ng thay ƒë·ªïi - ƒë√£ c√≥ prefix)")
                        log.write(f"B·ªè qua: '{filename}' (ƒë√£ c√≥ prefix '{prefix}')\n")
                        skipped_count += 1

                    # C·∫≠p nh·∫≠t ti·∫øn tr√¨nh
                    self.processed_files += 1
                    self.progress_bar["value"] = self.processed_files
                    self.status.set(f"ƒê√£ x·ª≠ l√Ω: {self.processed_files}/{self.total_files}")
                    self.root.update_idletasks()

                # T·ªïng k·∫øt k·∫øt qu·∫£
                log.write("\n" + "-" * 50 + "\n")
                log.write(f"T·ªïng s·ªë file: {self.total_files}\n")
                log.write(f"ƒê√£ ƒë·ªïi t√™n: {renamed_count}\n")
                log.write(f"ƒê√£ b·ªè qua: {skipped_count}\n")
                log.write(f"L·ªói: {error_count}\n")

            # Ho√†n th√†nh
            self.status.set(
                f"Ho√†n th√†nh! ƒê√£ ƒë·ªïi t√™n {renamed_count} file, b·ªè qua {skipped_count} file, l·ªói {error_count} file.")

            # Hi·ªÉn th·ªã th√¥ng b√°o ho√†n th√†nh
            if renamed_count > 0:
                messagebox.showinfo("Ho√†n th√†nh",
                                    f"ƒê√£ ƒë·ªïi t√™n {renamed_count} file th√†nh c√¥ng!\nFile log ƒë∆∞·ª£c l∆∞u t·∫°i:\n{log_file}")
            else:
                messagebox.showinfo("Th√¥ng b√°o",
                                    f"Kh√¥ng c√≥ file n√†o ƒë∆∞·ª£c ƒë·ªïi t√™n.\nFile log ƒë∆∞·ª£c l∆∞u t·∫°i:\n{log_file}")

        except Exception as e:
            self.status.set(f"ƒê√£ x·∫£y ra l·ªói: {str(e)}")
            messagebox.showerror("L·ªói", f"ƒê√£ x·∫£y ra l·ªói trong khi x·ª≠ l√Ω:\n{str(e)}")
        finally:
            # K√≠ch ho·∫°t l·∫°i n√∫t
            self.rename_button["state"] = "normal"


def main():
    root = tk.Tk()
    PrefixRenamerApp(root)
    root.mainloop()


if __name__ == "__main__":
    main()
